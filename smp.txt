def parse_all_models(models_list):
    import openpyxl
    import datetime
    
    header_to_model_mapping = {
        "algo name": ["name"],
        "Model ID": ["id"],
        "Algo ID": ["refId"],
        "algoSystem": None,  # This will be added separately as it's not directly in model
        "algo status": ["workflow", "status", "code"],
        "modelClass": ["modelClass", "code"],
        "BusinessUnit": ["businessUnit", "label"],
        "BusinessUnitPath": ["businessUnitPath"],
        "Complexity": ["complexity", "label"],
        "EPCount": None,  # Assuming EPCount is a separate computation
        "eonIds": ["info", "eonIds"],
        "algoType": ["info", "algoType", "label"],
        "Algo SPECIALIST": None,  # This will be processed separately
        "entities": None,  # Assuming this is not directly in model or needs processing
        "Countries Traded": ["info", "countriesAndMarketsTraded"],
        "regionsTraded": ["info", "regionsTraded"],
        "productsTraded": ["info", "productsTraded"],
        "exchangeVenues Traded": ["info", "exchangeVenuesTraded"],
        "MSS inventory": None,  # This will be computed using get_market_stress
        "Controls Native": None,  # This will be computed using get_controls
        "Controls Non-Native": None  # This will be computed using get_controls
    }
    
    resultxls = openpyxl.Workbook()
    wb_mcs = resultxls.active
    header = list(header_to_model_mapping.keys())
    wb_mcs.append(header)
    
    for model in models_list:
        excel_line = []
        for key in header:
            if header_to_model_mapping[key]:
                value = model
                for subkey in header_to_model_mapping[key]:
                    value = value.get(subkey, "NA")
                    if value == "NA":
                        break
                if isinstance(value, list):
                    value = ", ".join(value)
                elif value is None:
                    value = "NA"
            else:
                value = "NA"
                if key == "algoSystem":
                    value = model.get("modelClass", {}).get("code", "NA")
                elif key == "EPCount":
                    value = "Computed Value"  # Example placeholder for computed value
                elif key == "Algo SPECIALIST":
                    algo_roles = model.get('roles', [])
                    specialists = []
                    for roleType in algo_roles:
                        if roleType.get('roleType', {}).get('code') == "SPECIALIST":
                            specialists.extend([lg.get("fullName") for lg in roleType.get('users', []) if lg.get("fullName")])
                    value = ", ".join(specialists) if specialists else "NA"
                elif key == "MSS inventory":
                    value = get_market_stress(model.get("components", []))
                elif key in ["Controls Native", "Controls Non-Native"]:
                    ctrls, ctrls_non = get_controls(model.get("components", []))
                    value = ctrls if key == "Controls Native" else ctrls_non
            excel_line.append(value)
        wb_mcs.append(excel_line)
    
    filename_date = datetime.datetime.now().strftime('%Y-%m-%d')
    resultxls.save(f"mes_results_{filename_date}.xlsx")
    resultxls.close()
