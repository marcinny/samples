import os
import time
import platform
import re
from openpyxl import load_workbook, Workbook
from openpyxl.utils import get_column_letter
from termcolor import colored
import os.path

def search_xlsx_beta(xlsx_file, search_str, result_wb, column_offset=None, search_offset=None, print_algoName=None, date_calc=None, filter_sheetname=None, debug=False):
    start_time = time.time()

    try:
        wb = load_workbook(xlsx_file, read_only=True, data_only=True)
    except PermissionError:
        print(f"Permission denied to open file {xlsx_file}")
        return

    if debug:
        print(f"To open file: {xlsx_file} took: {round(time.time() - start_time, 2)} seconds")

    printed_filename = False
    algoName = None

    search_strings = [s.strip().lower() for s in search_str.split(",")]
    column_offsets = [int(offset) for offset in column_offset.split(",")] if column_offset else []

    result_sheet = result_wb.active
    file_name = os.path.basename(xlsx_file)

    for sheet in wb:
        sheet_name = sheet.title
        if filter_sheetname and sheet_name not in filter_sheetname:
            if debug:
                print(f"Skipping: {sheet_name}")
            continue

        for rowidx, row in enumerate(sheet.iter_rows(), start=1):
            for colidx, cellv in enumerate(row, start=1):
                cell = cellv.value
                if cell is None:
                    continue

                if "Algo" == str(cell):
                    algoName = str(sheet[get_column_letter(colidx + 1) + str(rowidx)].value)

                cell_lower = str(cell).lower()
                if any(search_str in cell_lower for search_str in search_strings):
                    if not printed_filename:
                        if platform.system() == 'Windows':
                            fileTime = os.path.getctime(xlsx_file)
                            print(f"{colored('FRMT:', 'yellow')} , created: {time.ctime(fileTime)}")
                        printed_filename = True

                    result_sheet.append([file_name, search_str, f"Sheet: {sheet_name}, Cell: {get_column_letter(colidx)}{rowidx}, Value: {cell_lower}"])

                    for coloffset in column_offsets:
                        target_col = colidx + coloffset
                        if target_col <= sheet.max_column:
                            celloffset = sheet[get_column_letter(target_col) + str(rowidx)].value
                            if celloffset:
                                result_sheet.append([file_name, search_str, f"Sheet: {sheet_name}, Cell Offset: {get_column_letter(target_col)}{rowidx}, Value: {celloffset}"])

                    if search_offset and re.search(search_offset, str(cell), flags=re.IGNORECASE | re.MULTILINE):
                        result_sheet.append([file_name, search_str, f"Sheet: {sheet_name}, Found Offset in Cell: {get_column_letter(colidx)}{rowidx}, Value: {cell}"])

                    if print_algoName and algoName:
                        result_sheet.append([file_name, search_str, f"Sheet: {sheet_name}, Algorithm: {algoName}, Cell: {get_column_letter(colidx)}{rowidx}, Value: {cell}"])

    wb.close()

def search_multiple_strings(xlsx_file, search_strings_list, output_file, column_offset=None, search_offset=None, print_algoName=None, date_calc=None, filter_sheetname=None, debug=False):
    result_wb = Workbook()
    result_sheet = result_wb.active
    result_sheet.title = "Search Results"
    result_sheet.append(["File", "Search String", "Result"])

    for search_str in search_strings_list:
        print(f"Searching for: {search_str}")
        search_xlsx_beta(xlsx_file, search_str, result_wb, column_offset=column_offset, search_offset=search_offset, print_algoName=print_algoName, date_calc=date_calc, filter_sheetname=filter_sheetname, debug=debug)

    result_wb.save(output_file)

# Example usage
# search_xlsx_beta("example.xlsx", "search_term", result_wb, column_offset="1,2", search_offset="pattern", print_algoName=True, filter_sheetname=["Sheet1"], debug=True)
# search_multiple_strings("example.xlsx", ["search_term1", "search_term2"], "output.xlsx", column_offset="1,2", search_offset="pattern", print_algoName=True, filter_sheetname=["Sheet1"], debug=True)
