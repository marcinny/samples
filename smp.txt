header_to_model_mapping = [
    ("algo name", lambda model: model.get("name", "NA")),
    ("Model ID", lambda model: model.get("id", "NA")),
    ("Algo ID", lambda model: model.get("refId", "NA")),
    ("algoSystem", lambda model: model.get("modelClass", {}).get("code", "NA")),
    ("algo status", lambda model: model.get("workflow", {}).get("status", {}).get("code", "NA").upper()),
    ("modelClass", lambda model: model.get("modelClass", {}).get("code", "NA")),
    ("BusinessUnit", lambda model: model.get("businessUnit", {}).get("label", "NA")),
    ("BusinessUnitPath", lambda model: model.get("businessUnitPath", "NA")),
    ("Complexity", lambda model: model.get("complexity", {}).get("label", "NA")),
    ("EPCount", lambda model: "Computed Value"),  # Placeholder for computed value
    ("eonIds", lambda model: ", ".join(model.get("info", {}).get("eonIds", []))),
    ("algoType", lambda model: model.get("info", {}).get("algoType", {}).get("label", "NA")),
    ("Algo SPECIALIST", lambda model: get_specialists(model)),
    ("entities", lambda model: "NA"),  # Placeholder if entities need processing
    ("Countries Traded", lambda model: get_countries_traded(model)),
    ("regionsTraded", lambda model: ", ".join([lg.get("code") for lg in model.get("info", {}).get("regionsTraded", []) if lg.get("code")])),
    ("productsTraded", lambda model: get_products_traded(model)),
    ("exchangeVenues Traded", lambda model: ", ".join([lg.get("name") for lg in model.get("info", {}).get("exchangeVenuesTraded", []) if lg.get("name")])),
    ("MSS inventory", lambda model: get_market_stress(model.get("components", []))),
    ("Controls Native", lambda model: get_controls(model.get("components", []))[0]),
    ("Controls Non-Native", lambda model: get_controls(model.get("components", []))[1])
]

def get_specialists(model):
    algo_roles = model.get('roles', [])
    specialists = []
    for roleType in algo_roles:
        if roleType.get('roleType', {}).get('code') == "SPECIALIST":
            specialists.extend([lg.get("fullName") for lg in roleType.get('users', []) if lg.get("fullName")])
    return ", ".join(specialists) if specialists else "NA"

def get_countries_traded(model):
    algo_info = model.get("info", {})
    if algo_info.get("countriesAndMarketsTraded"):
        cc_lst = [f"{cc['country']}: {', '.join(cc['markets'])}" for cc in algo_info["countriesAndMarketsTraded"]]
        return ", ".join(cc_lst)
    return "NA"

def get_products_traded(model):
    products_traded = [prodt["label"].split(":")[1] for prodt in model.get("info", {}).get("productsTraded", [])]
    return ", ".join(products_traded)
def parse_all_models(models_list):
    import openpyxl
    import datetime
    
    resultxls = openpyxl.Workbook()
    wb_mcs = resultxls.active
    header = [item[0] for item in header_to_model_mapping]
    wb_mcs.append(header)
    
    for model in models_list:
        excel_line = []
        for header, extractor in header_to_model_mapping:
            value = extractor(model)
            excel_line.append(value)
        wb_mcs.append(excel_line)
    
    filename_date = datetime.datetime.now().strftime('%Y-%m-%d')
    resultxls.save(f"mes_results_{filename_date}.xlsx")
    resultxls.close()
