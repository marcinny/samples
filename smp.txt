import os
import time
import platform
import re
from openpyxl import load_workbook, Workbook
from openpyxl.utils import get_column_letter
from termcolor import colored

def search_xlsx_beta(xlsx_file, search_strings_list, result_sheet, search_offset=None, print_algoName=None, date_calc=None, filter_sheetname=None, debug=False):
    start_time = time.time()

    try:
        wb = load_workbook(xlsx_file, read_only=True, data_only=True)
    except PermissionError:
        print(f"Permission denied to open file {xlsx_file}")
        return

    if debug:
        print(f"To open file: {xlsx_file} took: {round(time.time() - start_time, 2)} seconds")

    search_results = [os.path.basename(xlsx_file), ""] + [None] * len(search_strings_list)
    column_offset = 1

    for sheet in wb:
        sheet_name = sheet.title
        if filter_sheetname and sheet_name not in filter_sheetname:
            if debug:
                print(f"Skipping: {sheet_name}")
            continue

        search_results[1] = sheet_name

        for rowidx, row in enumerate(sheet.iter_rows(), start=1):
            for colidx, cellv in enumerate(row, start=1):
                cell = cellv.value
                if cell is None:
                    continue

                cell_lower = str(cell).lower()
                for idx, search_str_value in enumerate(search_strings_list):
                    if search_str_value.lower() in cell_lower:
                        if search_results[2 + idx] is None:
                            search_results[2 + idx] = cell

                        is_cell_merged = False
                        for mergedCell in sheet.merged_cells.ranges:
                            if cellv.coordinate in mergedCell:
                                is_cell_merged = True
                                min_col, min_row, max_col, max_row = mergedCell.bounds
                                for offsetrange in range(min_row, max_row + 1):
                                    offset_value = sheet[get_column_letter(colidx + column_offset) + str(offsetrange)].value
                                    if offset_value and search_results[2 + idx] is None:
                                        search_results[2 + idx] = offset_value
                        if not is_cell_merged:
                            celloffset = sheet[get_column_letter(colidx + column_offset) + str(rowidx)].value
                            if celloffset and search_results[2 + idx] is None:
                                search_results[2 + idx] = celloffset

                        if search_offset and re.search(search_offset, str(cell), flags=re.IGNORECASE | re.MULTILINE):
                            search_results[2 + idx] = f"Found Offset in Cell {get_column_letter(colidx)}{rowidx}, Value: {cell}"

                        if print_algoName and "Algo" == str(cell):
                            algoName = str(sheet[get_column_letter(colidx + 1) + str(rowidx)].value)
                            search_results[2 + idx] = f"Algorithm: {algoName}, Cell: {get_column_letter(colidx)}{rowidx}, Value: {cell}"

    result_sheet.append(search_results)
    wb.close()

def search_multiple_strings(xlsx_file, search_strings_list, output_file, search_offset=None, print_algoName=None, date_calc=None, filter_sheetname=None, debug=False):
    result_wb = Workbook()
    result_sheet = result_wb.active
    result_sheet.title = "Search Results"
    result_sheet.append(["File", "Sheet"] + search_strings_list)

    search_xlsx_beta(xlsx_file, search_strings_list, result_sheet, search_offset=search_offset, print_algoName=print_algoName, date_calc=date_calc, filter_sheetname=filter_sheetname, debug=debug)

    result_wb.save(output_file)

# Example usage
# search_multiple_strings("example.xlsx", ["search_term1", "search_term2"], "output.xlsx", search_offset="pattern", print_algoName=True, filter_sheetname=["Sheet1"], debug=True)
